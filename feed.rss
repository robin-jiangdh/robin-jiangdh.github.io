<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Ray Log</title>
		<link>http://blog.robinjiang.com/</link>
		<description>Live In an awesome life!</description>
		<copyright>2020</copyright>
		<pubDate>Thu, 19 Mar 2020 09:17:50 GMT</pubDate>
		<lastBuildDate>Thu, 19 Mar 2020 09:17:50 GMT</lastBuildDate>
		<item>
			<title>【SQL】SQL优化器原理——查询优化器综述</title>
			<link>http://blog.robinjiang.com/posts/2018/08/sql-optimized-principles</link>
			<description>&lt;p&gt;摘要： 本文主要是对数据库查询优化器的一个综述，包括查询优化器分类、查询优化器执行过程和CBO框架Calcite。这是MaxCompute有关SQL优化器原理的系列文章之一。我们会陆续推出SQL优化器有关优化规则和框架的其他文章。&lt;/p&gt;</description>
			<guid>http://blog.robinjiang.com/posts/2018/08/sql-optimized-principles</guid>
			<pubDate>Thu, 23 Aug 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;blockquote class="blockquote"&gt;
&lt;p&gt;摘要： 本文主要是对数据库查询优化器的一个综述，包括查询优化器分类、查询优化器执行过程和CBO框架Calcite。这是MaxCompute有关SQL优化器原理的系列文章之一。我们会陆续推出SQL优化器有关优化规则和框架的其他文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文主要是对数据库查询优化器的一个综述，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询优化器定义、分类&lt;/li&gt;
&lt;li&gt;查询优化器执行过程&lt;/li&gt;
&lt;li&gt;CBO框架Calcite简介&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section"&gt;1.查询优化器是什么&lt;/h2&gt;
&lt;p&gt;数据库主要由三部分组成，分别是解析器、优化器和执行引擎，如下图所示：
&lt;img src="asset/img/sql.jpg" class="img-fluid" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;其中优化器是数据库中用于把关系表达式转换成执行计划的核心组件，很大程度上决定了一个系统的性能。&lt;/p&gt;
&lt;h2 id="section-1"&gt;2.查询优化器分类&lt;/h2&gt;
&lt;p&gt;查询优化器分为两类：基于规则的优化器(Rule-Based Optimizer，RBO) 和基于代价的优化器(Cost-Based Optimizer，CBO) ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基于规则的优化器(Rule-Based Optimizer，RBO)
根据优化规则对关系表达式进行转换，这里的转换是说一个关系表达式经过优化规则后会变成另外一个关系表达式，同时原有表达式会被裁剪掉，经过一系列转换后生成最终的执行计划。
RBO中包含了一套有着严格顺序的优化规则，同样一条SQL，无论读取的表中数据是怎么样的，最后生成的执行计划都是一样的。同时，在RBO中SQL写法的不同很有可能影响最终的执行计划，从而影响脚本性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于代价的优化器(Cost-Based Optimizer，CBO)
根据优化规则对关系表达式进行转换，这里的转换是说一个关系表达式经过优化规则后会生成另外一个关系表达式，同时原有表达式也会保留，经过一系列转换后会生成多个执行计划，然后CBO会根据统计信息和代价模型(Cost Model)计算每个执行计划的Cost，从中挑选Cost最小的执行计划。由上可知，CBO中有两个依赖：统计信息和代价模型。统计信息的准确与否、代价模型的合理与否都会影响CBO选择最优计划。
从上述描述可知，CBO是优于RBO的，原因是RBO是一种只认规则，对数据不敏感的呆板的优化器，而在实际过程中，数据往往是有变化的，通过RBO生成的执行计划很有可能不是最优的。
事实上目前各大数据库和大数据计算引擎都倾向于使用CBO，例如从Oracle 10g开始，Oracle已经彻底放弃RBO，转而使用CBO；而Hive在0.14版本中也引入了CBO。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;3.查询优化器执行过程&lt;/h2&gt;
&lt;p&gt;无论是RBO，还是CBO都包含了一系列优化规则，这些优化规则可以对关系表达式进行等价转换，常见的优化规则包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谓词下推&lt;/li&gt;
&lt;li&gt;列裁剪&lt;/li&gt;
&lt;li&gt;常量折叠&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这些优化规则的基础上，就能对关系表达式做相应的等价转换，从而生成执行计划。下面将介绍RBO和CBO两种优化器的执行过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RBO&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RBO的执行过程比较简单，主要包含两个步骤：&lt;/p&gt;
&lt;p&gt;1）Transformation&lt;/p&gt;
&lt;p&gt;遍历关系表达式，只要模式能够满足特定优化规则就进行转换。&lt;/p&gt;
&lt;p&gt;2）Build Physical Plan&lt;/p&gt;
&lt;p&gt;经过Step1之后就生成了一个逻辑执行计划，但这只是逻辑上可行，还需要将逻辑执行计划build成物理执行计划，即决定各个Operator的具体实现。如Join算子的具体实现选择BroadcastHashJoin还是SortMergeJoin。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CBO&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CBO查询优化主要包含三个步骤：&lt;/p&gt;
&lt;p&gt;1）Exploration&lt;/p&gt;
&lt;p&gt;根据优化规则进行等价转换，生成等价关系表达式，此时原有关系表达式会被保留。&lt;/p&gt;
&lt;p&gt;2）Build Physical Plan&lt;/p&gt;
&lt;p&gt;决定各个Operator的具体实现。&lt;/p&gt;
&lt;p&gt;3）Find Best Plan&lt;/p&gt;
&lt;p&gt;根据统计信息计算各个执行计划的Cost，选择Cost最小的执行计划。
CBO实现有两种模型，即Volcano模型[1]和Cascades模型[2]，其中Calcite使用的是Volcano模型，而Orca[3]使用的是Cascades模型。这两种模型的思想基本相同，不同点在于Cascades模型并不是先Explore、后Build，而是边Explore边Build，从而进一步裁剪掉一些执行计划。在这里就不展开了，对此感兴趣的同学可以看下相关的论文。&lt;/p&gt;
&lt;h2 id="cbocalcite"&gt;4.CBO框架Calcite简介&lt;/h2&gt;
&lt;p&gt;Apache Calcite 是一个独立于存储与执行的SQL优化引擎，广泛应用于开源大数据计算引擎中，如Flink、Drill、Hive、Kylin等。另外，MaxCompute也使用了Calcite作为优化器框架。Calcite的架构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src="asset/img/calcite.jpg" class="img-fluid" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;其中Operator Expressions 指的是关系表达式，一个关系表达式在Calcite中被表示为RelNode，往往以根节点代表整个查询树。Calcite中有两种方法生成RelNode：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过Parser直接解析生成
从上述架构图可以看到，Calcite也提供了Parser用于SQL解析，直接使用Parser就能得到RelNode Tree。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过Expressions Builder转换生成
不同系统语法有差异，所以Parser也可能不同。针对这种情况，Calcite提供了Expressions Builder来对抽象语法树(或其他数据结构)进行转换得到RelNode Tree。如Hive(某一种Data Processing System)使用的就是这种方法。
Query Optimizer 根据优化规则(Pluggable Rules)对Operator Expressions进行一系列的等价转换，生成不同的执行计划，最后选择代价最小的执行计划，其中代价计算时会用到Metadata Providers提供的统计信息。
事实上，Calcite提供了RBO和CBO两种优化方式，分别对应HepPlanner和VolcanoPlanner。对此，本文也不进行展开，后续有时间再详细介绍Calcite的具体实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;5.总结&lt;/h2&gt;
&lt;p&gt;本文是对查询优化器的一个综述，介绍了查询优化器的分类、执行过程，以及优化器通用框架Calcite。&lt;/p&gt;
&lt;h2 id="section-4"&gt;6.参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] The Volcano Optimizer Generator: Extensibility and Efficient Search&lt;/li&gt;
&lt;li&gt;[2] The Cascades Framework for Query Optimization&lt;/li&gt;
&lt;li&gt;[3] Orca: A Modular Query Optimizer Architecture for Big Data&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
		</item>
	</channel>
</rss>